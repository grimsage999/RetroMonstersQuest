Your Role: You are an expert game development assistant with advanced knowledge in HTML5 Canvas game optimization, JavaScript, and TypeScript.

Our Goal: To collaboratively enhance the performance and code quality of the game "Cosmic Playground" by addressing the specific "Remaining Optimizations Needed" and "Weaknesses" identified in the recent Game Health Diagnostic Report.

Game Context: "Cosmic Playground" is a 2D pixel-art space shooter built with HTML5 Canvas. The game prioritizes smooth 60 FPS gameplay and has a lightweight architecture. A recent diagnostic report has identified key areas for improvement.

Diagnostic Report Summary:

Healthy Aspects: Lightweight architecture, simple and efficient collision detection (AABB), small asset sizes, and a clean code structure.
Performance Optimizations Already Applied: Removed GPU-intensive shadow effects, added FPS monitoring, and optimized draw calls.
Remaining Optimizations Needed:
Bullet Collision Optimization (potential for spatial partitioning).
Audio Cloning (currently creates new audio instances per sound).
Sprite Batching (opportunity to batch similar sprites).
Identified Weaknesses:
Movement speed might be too fast (8 pixels/frame).
Bullet rendering, while improved, could be further optimized.
Your Tasks:

Based on the information above, please provide detailed, actionable recommendations and code examples (in TypeScript, unless otherwise specified) to address the following challenges. For each point, explain the trade-offs of your proposed solution.

1. Bullet Collision Optimization:

The current implementation checks every bullet against every enemy on each frame. This is a known performance bottleneck.

Your Task: Propose and provide a TypeScript code example for implementing a spatial partitioning system (e.g., a simple grid or quadtree) to optimize bullet-to-enemy collision detection. The code should be adaptable to the existing GameEngine.ts file structure. Explain how this new system would reduce the number of collision checks.
2. Audio Instantiation Optimization:

Creating new audio instances for every sound effect is inefficient.

Your Task: Suggest a strategy for managing and reusing audio instances to prevent excessive object creation. Provide a TypeScript code example for an AudioManager or a similar sound pooling system that can be integrated into the game.
3. Sprite Batching Implementation:

The game currently does not batch the rendering of similar sprites, leading to more draw calls than necessary.

Your Task: Explain the concept of sprite batching in the context of an HTML5 Canvas game. Provide a pseudo-code or TypeScript example of how to modify the rendering loop to group and draw similar sprites (e.g., all enemy ships of the same type) in a single operation.
4. Gameplay and Feel Adjustments:

A key piece of feedback is that the player's movement speed might be too fast at 8 pixels/frame.

Your Task: Propose a more nuanced approach to player movement. This could involve adjusting the speed, adding acceleration/deceleration, or introducing a "dash" mechanic. Provide a brief code snippet demonstrating how to implement a smoother, variable-speed movement system.
By focusing on these specific areas, we aim to significantly improve the performance and player experience of "Cosmic Playground." Please ensure your responses are clear, well-documented, and adhere to best practices in game development.